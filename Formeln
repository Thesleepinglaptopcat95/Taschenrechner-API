///Server
// Express Server

const express = require('express');
const app = express();

///Addition Zahlen und Terme
function addition(x, z) {
    return x + z;
  }; 

// API Addition
app.get('/addition/:x/:z', (req, res) => {
  const x = parseFloat(req.params.x);
  const z = parseFloat(req.params.z);
  const result = addition(x, z);
  res.json({ result });
});

//Fake API zum löschen der Funktion
app.get('/delete', (req, res) => {
    res.send("Rechenoperation wurde gelöscht")});
  
  
///Subtraktion Zahlen und Terme

function subtraction(x, z) {
    return x - z;
  }; 

/// API Subtraktion 
app.get('/subtraction/:x/:y', (req, res) => {
  const x = parseFloat(req.params.x);
  const y = parseFloat(req.params.y);
  const result = subtraction(x, y);
  const response = {
    x: x,
    y: y,
    result: result
  };
  res.json(response);
});

  ///Multiplikation von Zahlen und Termen
  function multiplikation(x, z) {
    return x * z;
  }; 

//API Multiplikation
  app.get('/multiplikation/:x/:z', (req, res) => {
    const x = req.params.x;
    const z = req.params.z;

    const result = multiplikation(x, z);

    res.send({
        result
    });
  });

//Dividieren von Zahlen und Termen

function division(x, z) {
    return x / z;
  };

//API Division  
app.get('/division', (req, res) => {
  const { x, z } = req.query;
  const result = division(x, z);
  res.status(200).send({ result });
});

// Definition einer Funktion für Addition von Vektoren
function vectorAdd(vector1, vector2) {
    // Erstellen eines neuen Vektors
    let resultVector = [];
  
    // Prüfen, ob beide Vektoren die gleiche Länge haben
    if (vector1.length !== vector2.length) {
      return 'Die Vektoren haben nicht die gleiche Länge!';
    }
    
    // Addieren der Elemente der beiden Vektoren und speichern des Ergebnisses im neuen Vektor
    for (let i = 0; i < vector1.length; i++) {
      resultVector.push(vector1[i] + vector2[i]);
    }
  
    // Gib das Ergebnis zurück
    return resultVector;
  };

 //API Vektoraddition 

  app.get('/vectorAdd', (req, res) => {
    const { vector1, vector2 } = req.query;
    const resultVector = vectorAdd(vector1, vector2);
    res.json({ vectorAddResult: resultVector });
  });

///Funltion zur Berechnung von Fakultäten
function fakultaet(n) { 
    if (n === 0) { 
      return 1; 
    } 
    return n * fakultaet(n-1); 
  }; 

//API Fakultäten
app.get('/fakultaet', (req, res) => {
    let n = req.query.n;
    let result = fakultaet(n);
    res.json({result});
  });

// Funktion zur Berechnung des Kreuzproduktes
function Kreuzprodukt(vec1, vec2) {
    let x = vec1[1] * vec2[2] - vec1[2] * vec2[1];
    let y = vec1[2] * vec2[0] - vec1[0] * vec2[2];
    let z = vec1[0] * vec2[1] - vec1[1] * vec2[0];
  
    return [x, y, z];
  };
  // API für Kreuzprodukte
app.get('/Kreuzprodukt', (req, res) => {
    const vec1 = req.query.vec1;
    const vec2 = req.query.vec2;
  
    if (!vec1 || !vec2) {
      return res.status(400).send({ error: 'Kreuzprodukt nicht ermittelbar' });
    }
  
    const result = crossProduct(vec1, vec2);
  
    return res.status(200).send({ result });
  });

//Funktion für Potenzrechnung
  function Potenzrechnung(basis, exponent) {
    let result = 1;
    if (exponent > 0) {
      for (let i = 0; i < exponent; i++) {
        result *= basis;
      }
    } else if (exponent < 0) {
      for (let i = 0; i > exponent; i--) {
        result /= basis;
      }
    }
    return result;
  };  

// API Potenzrechnung
app.get('/api/potenzrechnung', (req, res) => {
    const { basis, exponent } = req.query;
    const result = Potenzrechnung(basis, exponent);
    res.json({
      result,
    });
  });  

  
// Server starten
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Taschenrechner ist bereit`));
