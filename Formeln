///Formeln 



///Addition Zahlen und Terme
function addition(x, z) {
  return x + z;
} 



///Subtraktion Zahlen und Terme

function subtraction(x, z) {
    return x - z;
  } 

///Multiplikation von Zahlen und Termen
  function multiplikation(x, z) {
    return x * z;
  } 

//Dividieren von Zahlen und Termen

function division(x, z) {
    return x / z;
  } 

// Definition einer Funktion für Addition von Vektoren
function vectorAdd(vector1, vector2) {
  // Erstellen eines neuen Vektors
  let resultVector = [];

  // Prüfen, ob beide Vektoren die gleiche Länge haben
  if (vector1.length !== vector2.length) {
    return 'Die Vektoren haben nicht die gleiche Länge!';
  }
  
  // Addieren der Elemente der beiden Vektoren und speichern des Ergebnisses im neuen Vektor
  for (let i = 0; i < vector1.length; i++) {
    resultVector.push(vector1[i] + vector2[i]);
  }

  // Gib das Ergebnis zurück
  return resultVector;
}

// Beispiel:
// vector1 = [1, 2, 3]
// vector2 = [4, 5, 6]

// Ausgabe:
// [5, 7, 9]

///Funltion zur Berechnung von Fakultäten
function fakultaet(n) { 
  if (n === 0) { 
    return 1; 
  } 
  return n * fakultaet(n-1); 
} 
//Beispiel
//console.log(fakultaet(5)); 
// Ausgabe: 120

// Funktion zur Berechnung des Kreuzproduktes
function crossProduct(vec1, vec2) {
  let x = vec1[1] * vec2[2] - vec1[2] * vec2[1];
  let y = vec1[2] * vec2[0] - vec1[0] * vec2[2];
  let z = vec1[0] * vec2[1] - vec1[1] * vec2[0];

  return [x, y, z];
}

// Beispiel
//let vec1 = [5, 9, 2];
//let vec2 = [2, 4, 7];

//let result = crossProduct(vec1, vec2);

///console.log(result); 

///

function potenzRechnung(basis, exponent) {
  let result = 1;
  if (exponent > 0) {
    for (let i = 0; i < exponent; i++) {
      result *= basis;
    }
  } else if (exponent < 0) {
    for (let i = 0; i > exponent; i--) {
      result /= basis;
    }
  }
  return result;
}

// Beispiel
//let ergebnis = potenzRechnung(5, -2);
//console.log(ergebnis); 
